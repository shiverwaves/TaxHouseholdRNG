name: Enhanced Family Generator

on:
  workflow_dispatch:
    inputs:
      count:
        description: 'Number of families to generate'
        required: false
        default: '10'
        type: string
      state:
        description: 'Target state (e.g., California, Texas)'
        required: false
        default: ''
        type: string

  push:
    branches: [ main ]

jobs:
  generate-families:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2-binary python-dotenv
    
    - name: Build command arguments
      id: build_args
      run: |
        ARGS="--count ${{ github.event.inputs.count || '10' }}"
        
        if [[ -n "${{ github.event.inputs.state }}" ]]; then
          ARGS="$ARGS --state '${{ github.event.inputs.state }}'"
        fi
        
        echo "args=$ARGS" >> $GITHUB_OUTPUT
        echo "Generated command: python enhanced_family_generator.py $ARGS"
    
    - name: Generate Families
      env:
        NEON_CONNECTION_STRING: ${{ secrets.NEON_CONNECTION_STRING }}
      run: |
        echo "🏠 Generating families with enhanced database integration..."
        echo "Command: python enhanced_family_generator.py ${{ steps.build_args.outputs.args }}"
        echo ""
        
        python enhanced_family_generator.py ${{ steps.build_args.outputs.args }} 2>&1 | tee generation_output.txt
    
    - name: Parse and Create JSON Output
      run: |
        echo "📊 Creating JSON output for artifact..."
        
        python -c "
        import json
        import re
        from datetime import datetime
        
        # Read the generation output
        try:
            with open('generation_output.txt', 'r') as f:
                output_lines = f.readlines()
        except:
            output_lines = []
        
        # Extract key information from output
        families_generated = 0
        avg_income = 0
        median_income = 0
        
        for line in output_lines:
            if 'Successfully generated' in line and 'families' in line:
                match = re.search(r'generated (\d+) families', line)
                if match:
                    families_generated = int(match.group(1))
            elif 'Average household income:' in line:
                match = re.search(r'\\\$([0-9,]+)', line)
                if match:
                    avg_income = int(match.group(1).replace(',', ''))
            elif 'Median household income:' in line:
                match = re.search(r'\\\$([0-9,]+)', line)
                if match:
                    median_income = int(match.group(1).replace(',', ''))
        
        # Create metadata JSON
        generation_metadata = {
            'generation_date': datetime.now().isoformat(),
            'generator_version': 'enhanced_v1',
            'database_integration': True,
            'families_generated': families_generated,
            'parameters': {
                'count': '${{ github.event.inputs.count || \"10\" }}',
                'state': '${{ github.event.inputs.state || \"random\" }}'
            },
            'statistics': {
                'average_household_income': avg_income,
                'median_household_income': median_income
            },
            'data_sources': [
                'OEWS wage data',
                'Census state demographics', 
                'Education-occupation probability matrices',
                'State employment statistics'
            ],
            'features': [
                'Real employment rates by state and education',
                'Probability-based occupation selection', 
                'Current wages from OEWS database',
                'Realistic unemployment benefits',
                'State-specific education distributions'
            ]
        }
        
        # Save metadata
        with open('generation_metadata.json', 'w') as f:
            json.dump(generation_metadata, f, indent=2)
        
        print('✅ Generation metadata saved to generation_metadata.json')
        "
    
    - name: Generate Summary Report
      run: |
        echo ""
        echo "📊 ENHANCED FAMILY GENERATOR SUMMARY"
        echo "============================================================"
        
        python -c "
        import json
        
        try:
            with open('generation_metadata.json', 'r') as f:
                metadata = json.load(f)
                
            print(f'📅 Generated: {metadata[\"generation_date\"]}')
            print(f'🔗 Generator Version: {metadata[\"generator_version\"]}')
            print(f'👥 Families Generated: {metadata[\"families_generated\"]}')
            print(f'🎯 Target State: {metadata[\"parameters\"][\"state\"]}')
            print(f'📊 Count Requested: {metadata[\"parameters\"][\"count\"]}')
            
            if metadata[\"statistics\"][\"average_household_income\"] > 0:
                print(f'💰 Average Income: \\\${metadata[\"statistics\"][\"average_household_income\"]:,}')
            if metadata[\"statistics\"][\"median_household_income\"] > 0:
                print(f'💰 Median Income: \\\${metadata[\"statistics\"][\"median_household_income\"]:,}')
            
            print('')
            print('🚀 ENHANCED FEATURES:')
            for feature in metadata[\"features\"]:
                print(f'   ✅ {feature}')
            
            print('')    
            print('📊 DATA SOURCES:')
            for source in metadata[\"data_sources\"]:
                print(f'   • {source}')
                
        except Exception as e:
            print(f'Error reading metadata: {e}')
        "
        
        echo ""
        echo "💡 FULL FAMILY DETAILS:"
        echo "   The complete family data with all member details"
        echo "   was displayed in the 'Generate Families' step above."
        echo ""
        echo "📁 ARTIFACTS:"
        echo "   • generation_metadata.json - Generation statistics and metadata"
        echo "   • generation_output.txt - Complete console output with family details"
        echo ""
        echo "============================================================"
        echo "✅ Enhanced family generation completed successfully!"
        echo "🔗 Real database integration with OEWS wage data"
        echo "📊 State-specific employment and education distributions" 
        echo "💼 Probability-based occupation selection"
        echo "============================================================"
    
    - name: Upload Generation Results
      uses: actions/upload-artifact@v4
      with:
        name: enhanced-family-generation-results
        path: |
          generation_metadata.json
          generation_output.txt
        retention-days: 30
    
    - name: Create Summary
      run: |
        echo ""
        echo "📁 DOWNLOAD INSTRUCTIONS:"
        echo "   1. Go to the Actions tab in your repository"
        echo "   2. Click on this workflow run"
        echo "   3. Download the 'enhanced-family-generation-results' artifact"
        echo "   4. Extract the ZIP file to access:"
        echo "      • generation_metadata.json (statistics and metadata)"
        echo "      • generation_output.txt (complete family details)"
        echo ""
        echo "💾 Files will be available for 30 days"
