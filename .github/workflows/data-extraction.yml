name: Tax Scenario Data Extraction

on:
  # Run monthly on the 1st at 2 AM UTC
  schedule:
    - cron: '0 2 1 * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      extraction_type:
        description: 'Type of extraction to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - census-only
        - oews-only
        - validate

env:
  PYTHON_VERSION: '3.11'

jobs:
  extract-data:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hours max
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate environment
      env:
        NEON_CONNECTION_STRING: ${{ secrets.NEON_CONNECTION_STRING }}
        CENSUS_API_KEY: ${{ secrets.CENSUS_API_KEY }}
      run: |
        python -c "
        import os
        assert os.getenv('NEON_CONNECTION_STRING'), 'NEON_CONNECTION_STRING not set'
        print('âœ“ Environment validated')
        "
    
    - name: Run data extraction
      env:
        NEON_CONNECTION_STRING: ${{ secrets.NEON_CONNECTION_STRING }}
        CENSUS_API_KEY: ${{ secrets.CENSUS_API_KEY }}
      run: |
        # Determine extraction flags based on input
        case "${{ github.event.inputs.extraction_type || 'full' }}" in
          census-only)
            FLAGS="--census-only"
            ;;
          oews-only)
            FLAGS="--oews-only"
            ;;
          validate)
            FLAGS="--validate"
            ;;
          *)
            FLAGS=""
            ;;
        esac
        
        echo "Running extraction with flags: $FLAGS"
        python data-extractor.py $FLAGS
    
    - name: Upload extraction logs
      uses: actions/upload-artifact@v3
      if: always()  # Upload logs even if extraction fails
      with:
        name: extraction-logs-${{ github.run_id }}
        path: logs/
        retention-days: 30
    
    - name: Post-extraction validation
      env:
        NEON_CONNECTION_STRING: ${{ secrets.NEON_CONNECTION_STRING }}
      run: |
        # Run validation to ensure data quality
        python data-extractor.py --validate
      if: github.event.inputs.extraction_type != 'validate'
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "ðŸ”¥ Data extraction failed!"
        echo "Check the logs for details and consider manual intervention."
        # You could add Slack/email notifications here
